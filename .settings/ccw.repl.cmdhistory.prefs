cmdhistory=["(macroexpand `(log \\"hallo\\"))" "(macroexpand (log \\"hallo\\"))" "(macroexpand `(log \\"hallo\\"))" "(macroexpand `(log \\"hallo\\" \\"huhu\\"))" "(min-menues 100000)" "(min-menues 32768)" "(min-menues 2000)" ";; Switching to cljs-playground.probability-of-winning namespace" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (prob (map read-string (clojure.string/split (read-line) \#\\"\\\\s+\\"))))))" "(defn prob [n]\\n  (float (/ (nth n 0) (nth n 1))))" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (prob (map read-string (clojure.string/split (read-line) \#\\"\\\\s+\\"))))))" ";; Switching to cljs-playground.probability-of-winning namespace" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (prob (map read-string (.split (read-line) \#\\"\\\\s+\\"))))))" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (prob (map read-string (.split (read-line) \\" \\"))))))" ";; Switching to little-elephant namespace" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (is-good (read-line) (seq (map read-string (.split (read-line) \\" \\")))))))" "(defn is-good [_ list]\\n  (let [local-invs (count (filter < (partition 2 list)))\\n        invs (count llst)]\\n    (if (\= local-invs invs)\\n      \\"YES\\"\\n      \\"NO\\")))" "(defn is-good [_ list]\\n  (let [local-invs (count (filter \#(> % %2) (partition 2 list)))\\n        invs (count llst)]\\n    (if (\= local-invs invs)\\n      \\"YES\\"\\n      \\"NO\\")))" "(defn is-good [_ list]\\n  (let [local-invs (count (filter \#(> % %2) (partition 2 list)))\\n        invs (count list)]\\n    (if (\= local-invs invs)\\n      \\"YES\\"\\n      \\"NO\\")))" ";; Switching to little-elephant namespace" "(defn is-good [_ list]\\n  (let [local-invs (count (filter \#(> (first %) (second %)) (partition 2 list)))\\n        invs (count list)]\\n    (if (\= local-invs invs)\\n      \\"YES\\"\\n      \\"NO\\")))" ";; Switching to little-elephant namespace" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (is-good (read-line) (seq (map read-string (.split (read-line) \\" \\")))))))" "(defn is-good [_ list]\\n  (let [local-invs (count (filter \#(> (first %) (second %)) (partition 2 list)))\\n        invs (count-invs list)]\\n    (println local-invs)\\n    (println invs)\\n    (if (\= local-invs invs)\\n      \\"YES\\"\\n      \\"NO\\")))" "(let [test-cases (Integer. (read-line))]\\r\\n  (dotimes [n test-cases]\\r\\n    (println (is-good (read-line) (seq (map read-string (.split (read-line) \\" \\")))))))" "(defn is-good [_ list]\\n  (let [local-invs (count (filter \#(> (first %) (second %)) (partition 2 1 list)))\\n        invs (count-invs list)]\\n    (println local-invs)\\n    (println invs)\\n    (if (\= local-invs invs)\\n      \\"YES\\"\\n      \\"NO\\")))" ";; Switching to little-elephant namespace"]
eclipse.preferences.version=1
